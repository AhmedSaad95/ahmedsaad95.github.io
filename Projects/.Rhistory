model
{
for (i in 1 : K) {
unemployedG[i]  ~ dbin(pUnemployedG[i], popG[i])
unemployedS[i] ~ dbin(pUnemployedS[i], popS[i])
logit(pUnemployedG[i]) <- alphaG + betaG * growth_rate[i]
logit(pUnemployedS[i]) <- alphaS + betaS * growth_rate[i]
cumulative.unemployedG[i] <- cumulative(unemployedG[i], unemployedG[i])
cumulative.unemployedS[i] <- cumulative(unemployedS[i], unemployedS[i])
}
alphaG  ~ dnorm(0.0, 100)
betaG  ~ dnorm(0.0, 100)
alphaS  ~ dnorm(0.0, 100)
betaS  ~ dnorm(0.0, 100)
}
",fill=T)
sink()
filename0<-"mod.txt"
list=list(unemployedS = c(22,21,24,34,33,29,30,39,36,27,25),
popS = rep(100,11),
unemployedG = c(18,17,16,22,22,24,30,31,27,29,30),
popG = rep(100,11),
growth_rate = c(3.486535815,5.244195185,6.709620392,4.237776836,3.043448955,3.510608639,-1.91717768,3.997674002,2.875523842,2.971398345,1.153615837), K = 11)
inits<-function(){
inits1=list(alphaG=0,betaG=0,alphaS=0,betaS=0
)
inits2=list(alphG=1.0,betaG=1.0,alphaS=1,betaS=1
)
}
inits<-function(){
inits1=list(alphaG=0,betaG=0,alphaS=0,betaS=0
)
inits2=list(alphG=1.0,betaG=1.0,alphaS=1,betaS=1
)
}
params<-c("alphaG","betaG","alphaS","betaS")
library(R2OpenBUGS)
library(coda)
out0<-bugs(list,inits,params,filename0,codaPkg=F,n.burnin = 3000,
n.thin =1, n.iter=7000,
n.chains = 3,working.directory=getwd()
)
out0
save.image("emp.RData")
install.packages("corrgram")
library(FactoMineR)
data("decathlon")
attach(decathlon)
str(decathlon)
summary(decathlon)
a=table(Competition)
names(which.max(a))
x=decathlon[,1:10]
n=nrow(x)
p=ncol(x)
m=colMeans(x)
x=sweep(x,2,m,FUN ="-")
m1=apply(x,2,function(x)sqrt(sum(x^2)/n))
x=sweep(x,2,m1,FUN ="/")
x=as.matrix(x)
d=1/n*diag(rep(1,n))
v=t(x)%*%d%*%x
lam=eigen(v)
res.pca=PCA(decathlon,quali.sup = 13,quanti.sup = 11:12)
res.pca$eig
res.pca$var
res.pca$ind$coord
PCA(decathlon,quali.sup = 13,quanti.sup = 11:12,axes = c(1,3))
library(factoextra)
fviz_screeplot(res.pca)
fviz_pca_ind(res.pca,geom = "point")
fviz_pca_var(res.pca,col.var = "cos2",gradient.cols=c("red","blue"))
library(ade4)
screeplot(res.pca2)
plot(res.pca)
scatter(res.pca2)
res.pca2=dudi.pca(decathlon[,1:10])
library(pca3d)
b=princomp(decathlon[,1:10])
pca3d(b)
library(FactoMineR)
data("decathlon")
X=decathlon[,1:10]
library(cluster)
classif=agnes(X,method="ward")
classif
plot(classif)
d=dist(scale(X),method = "euclidian")
hc=hclust(d,method="ward.D")
plot(hc)
plot(hc, hang=-1)
hc$dist.method #distance
hc$method #methode d'agrÃ©gation
hc$height #distance les classes verticalement
hc$order #ordre des individus Ã  l'Ã©tape 0
hc$merge #dÃ©roulement de processus d'agrÃ©gation
classif2=as.hclust(classif)#classification hiÃ©rarchique
plot(rev(classif2$height),type = "h")
classe<-cutree(classif,k=4)
decathlon.classe=cbind.data.frame(X,as.factor(classe))
View(decathlon.classe)
colnames(decathlon.classe)[11]=c("classes")
catdes
V=t(X)%*%D%*%X
library(FactoMineR)
data(decathlon)
head(decathlon)
tail(decathlon)
str(decathlon)
# competition est une variable nominale, catégorielle comme sexe (H ou F). Le reste des variables sont soit quantitatives discrètes (Points, Rank) soit continues (100m, Discus).
summary(decathlon)
attach(decathlon)
table(Points) # 2 athlètes ont le même score soit 7708, 8067
#Le mode s'obtient par lecture de la table des effectifs en prenant la modalité correpondant au plus grand effectif.
sort(table(Points),decreasing=TRUE)
names(which.max(table(Points)))
median(Points)
var(Points)
sd(Points)
X=data.frame(scale(decathlon[,-c(11,13)]),decathlon$Competition)
colnames(X)=colnames(decathlon)[-11]
X=as.matrix(decathlon[,1:10])
g=colMeans(X)
g
X=sweep(x=X,2,g,FUN = '-')
round(colMeans(X),3)
n=nrow(X)
p=ncol(X)
et=apply(X,2,function(x) sqrt(sum(x^2)/n))
et
X=sweep(x=X,2,et,FUN = '/')
colSums(X^2)/n
M=diag(rep(1,p))
D=(1/n)*diag(rep(1,n))
V=t(X)%*%D%*%X
vp=eigen(M%*%V)
lambda=vp$values
lambda
v=vp$vectors
V=t(X)%*%D%*%X
vp=eigen(M%*%V)
lambda=vp$values
lambda
v=vp$vectors
v
data("decathlon")
View(decathlon)
library(FactoMineR)
data("decathlon")
attach(decathlon)
str(decathlon)
summary(decathlon)
a=table(Competition)
names(which.max(a))
x=decathlon[,1:10]
n=nrow(x)
p=ncol(x)
m=colMeans(x)
x=sweep(x,2,m,FUN ="-")
m1=apply(x,2,function(x)sqrt(sum(x^2)/n))
x=sweep(x,2,m1,FUN ="/")
x=as.matrix(x)
d=1/n*diag(rep(1,n))
v=t(x)%*%d%*%x
res.pca=PCA(decathlon,quali.sup = 13,quanti.sup = 11:12)
library(FactoMineR)
tab<-matrix(c(908,869,901,619,1307,1008,1035,612,73,107,80,177,642,408,140,209,360,336,311,298,435,494,504,281), ncol=6)
rownames(tab)<-c("Prim","Second","Tech","Sup")
colnames(tab)<-c("Radio","Tele","QuotNat", "QuotReg", "PrMag","PrTV")
tab
prof_lig<-addmargins(prop.table(addmargins(tab,1),1),2)
prof_lig
prof_col<-addmargins(prop.table(addmargins(tab,2),2),1)
prof_col
pc<-round(100*prop.table(tab,margin=2),1)
pcm<-apply(tab,1,sum)
pcm<-(pcm/12114)*100
pcm
tab_pc<-cbind(pc,pcm)
tab_pc
operateur=factor(c(rep("TT",7),rep("OO",4),rep("OR",4)))
region=factor(c("N","C","N","S","S","C","N","S","C","C","C","S","S","C","S"))
don=cbind.data.frame(operateur,region)
tab=table(don$operateur,don$region)
f=round(100*tab/sum(tab),1)
pl=round(100*prop.table(tab,margin = 1),1)
pc=round(100*prop.table(tab,margin = 2),1)
View(don)
pc
test=chisq.test(tab)
library("stats", lib.loc="C:/Program Files/R/R-3.3.1/library")
test=chisq.test(tab)
prim=c(908,1307,73,642,360,435)
second=c(869,1008,107,408,336,494)
techn=c(901,1035,80,140,311,504)
super=c(619,612,177,209,298,281)
tab1=data.frame(rbind(prim,second,techn,super))
colnames(tab1)=c("radio","tele","quotnat","quotreg","prmag","prtv")
library(FactoMineR)
View(tab1)
res.ca=CA(tab1)
res.ca
summary(res.ca) # il y a dependance entre les variables (p<0.05 ou on compare le khi2 par la valeur du tableau)
library(FactoMineR)
rownames(tab)<-c("Prim","Second","Tech","Sup")
tab<-matrix(c(908,869,901,619,1307,1008,1035,612,73,107,80,177,642,408,140,209,360,336,311,298,435,494,504,281), ncol=6)
colnames(tab)<-c("Radio","Tele","QuotNat", "QuotReg", "PrMag","PrTV")
tab
prof_lig<-addmargins(prop.table(addmargins(tab,1),1),2)
prof_lig
prof_col<-addmargins(prop.table(addmargins(tab,2),2),1)
prof_col
pc<-round(100*prop.table(tab,margin=2),1)
pcm<-apply(tab,1,sum)
pcm<-(pcm/12114)*100
pcm
tab_pc<-cbind(pc,pcm)
tab_pc
tab_pc<-round(tab_pc,1)
tab_pc
pl<-round(100*prop.table(tab,margin=1),1)
plm<-apply(tab,2,sum)
plm<-(plm/12114)*100
tab_pl<-rbind(pl,plm)
tab_pl
tab_pl<-round(tab_pl,1)
tab_pl
test<-chisq.test(tab)
test
res.ca<-CA(tab,graph=T)
res.ca<-CA(tab,graph=T)
summary(res.ca)
barplot(res.ca$eig[,2], names=paste("Dim",1:nrow(res.ca$eig)))
res.ca<-CA(tab,graph=T,ncp = 4)
summary(res.ca)
res.ca<-CA(tab,graph=T,ncp = 2)
summary(res.ca)
res.ca<-CA(tab,graph=T)
summary(res.ca)
barplot(res.ca$eig[,2], names=paste("Dim",1:nrow(res.ca$eig)))
round(res.ca$eig,3)
round(cbind(res.ca$row$coord[,1:2],res.ca$row$cos2[,1:2]),2)
barplot(res.ca$eig[,2], names=paste("Dim",1:nrow(res.ca$eig)))
round(res.ca$eig,3)
round(cbind(res.ca$row$coord[,1:2],res.ca$row$cos2[,1:2]),2)
plot(res.ca, invisible="col")
round(cbind(res.ca$col$coord[,1:2],res.ca$col$cos2[,1:2]),2)
plot(res.ca, invisible="row")
res.ca$col$coord
round(cbind(res.ca$row$coord[,1:2],res.ca$row$cos2[,1:2]),2)
res.ca$col$coord
round(cbind(res.ca$col$coord[,1:2],res.ca$col$cos2[,1:2]),2)
plot(res.ca)
plot(res.ca,invisible = "col")
plot(res.ca,invisible = "row")
canines <- read.table("canines.txt",header= T,row.names = 1)
summary(canines)
library(FactoMineR)
library(FactoMineR)
data(tea)
View(tea)
colnames(tea)
tea[,19]
name(tea[,19])
names(tea[,19])
res.mca=MCA(tea,quanti.sup = 19,quali.sup = 20:36)
res.mca
plot.MCA(res.mca,invisible = c("ind","quali.sup"))
res.mca1=MCA(tea[1:10])
plot.MCA(res.mca1,invisible=c("ind"))
res.mca
summary(res.mca)
plot.MCA(res.mca,invisible = c("ind","quali.sup"))
res.mca1=MCA(tea[1:10])
plot.MCA(res.mca1,invisible=c("ind"))
plot.MCA(res.mca1,invisible=c("ind"))
res.mca1$eig
barplot(res.mca1$eig[,2])
dimdesc(res.mca1)
library(cluster)
library(FactoMineR)
data("decathlon")
X=decathlon[,1:10]
classif<-agnes(X, method="ward")
plot(classif,xlab="individu",main="")
d=dist(scale(X),method = "euclidian")
hc1=hclust(d,method = "ward.D") # or complete or average
plot(hc1)
classif2<-as.hclust(classif)
plot(rev(classif2$height), type="h", ylab="hauteurs")
hc1$height
classes<-cutree(classif2,k=2)
classes
plot(1:40,hc1$height[40:1],type="b")
inertie = sort(hc1$height,decreasing=TRUE)
plot(inertie[1:20],type="s",xlab="Nombre de classes", ylab="Inertie")
decathlon.comp<-cbind.data.frame(X, as.factor(classes))
colnames(decathlon.comp)[11]<-"Classe"
decathlon.comp
res.cat=catdes(decathlon.comp, num.var=11)
library(NbClust)
install.packages("NbClust")
library("NbClust", lib.loc="~/R/win-library/3.3")
data(iris)
kc=kmeans(iris[,-5],3)
kc
kc$centers
kc$withinss
table(iris$Species,kc$cluster)
plot(iris[,-5],col=kc$cluster)
data(iris)
kc=kmeans(iris[,-5],4)
kc
kc$centers
kc$withinss
table(iris$Species,kc$cluster)
plot(iris[,-5],col=kc$cluster)
kc=kmeans(iris[,-5],3)
kc
kc$centers
kc$withinss
table(iris$Species,kc$cluster)
plot(iris[,-5],col=kc$cluster)
kc$cluster
points(kc$cluster)
plot(iris[,1:2],col=kc$cluster)
points(kc$centers[,1:2],col=1:3,pch=8)
library(NbClust)
set.seed(1234)
nc <- NbClust(X, min.nc = 2, max.nc = 15, method = "kmeans" )
X=as.matrix(X)
nc2<- NbClust(X, min.nc = 2, max.nc = 15, method = "ward.D" )
sum(table(nc$Best.n[1, ]))
barplot(table(nc$Best.n[1, ]), xlab = "Numer of Clusters", ylab = "Number of Criteria",  main = "Number of Clusters Chosen by 26 Criteria")
library(FactoMineR)
data(tea)
View(tea)
colnames(tea)
res.mca=MCA(tea,quanti.sup = 19,quali.sup = 20:36)
res.mca
plot.MCA(res.mca,invisible = c("ind","quali.sup"))
res.mca1=MCA(tea[1:10])
plot.MCA(res.mca1,invisible=c("ind"))
res.mca1$eig
barplot(res.mca1$eig[,2])
dimdesc(res.mca1)
library(FactoMineR)
tab<-matrix(c(908, 869,901,619,1307,1008,1035,612,73,107,80,177,642,408,140,209,360,336,311,298,435,494,504,281), ncol =6)
rownames(tab)<-c("Prim","Second", "Tech","Sup")
colnames(tab)<-c("Radio","TÃ©lÃ©","QuotNat","QuotReg","PrMag","PrTV")
View(tab)
res.ca<-CA(tab)
res.ca$row$coord
res.ca$col$coord
res.ca$col$cos2
res.ca$row$cos2
barplot(res.ca$eig[,2],names=paste("Dim",1:nrow(res.ca$eig)))
round(res.ca$eig,3)
summary(res.ca)
res.ca$eig
summary(res.ca)
round(cbind(res.ca$row$coord[,1:2],res.ca$row$cos2[,1:2]),2)
plot(res.ca, invisible = "col")
round(cbind(res.ca$col$coord[,1:2],res.ca$col$cos2[,1:2]),2)
plot(res.ca, invisible = "row")
library(readr)
hedo_biscuit <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(hedo_biscuit)
hedo <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
hedo <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(hedo)
row.names(hedo)=hedo$X1
hedo=hedo[-1,]
hedo <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
row.names(hedo)=hedo$X1
hedo=hedo[-3,]
x=hedo$X1
hedo <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
x=hedo$X1
hedo=hedo[-1,]
hedo=hedo[-1,]
hedo <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
row.names(hedo)=hedo$X1
hedo=hedo[,-1]
hedo <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
row.names(hedo)=hedo$X1
hedo=hedo[,-1]
hedo <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
x=hedo$X1
row.names(hedo)=hedo$X1
hedo=hedo[,-1]
hedo <- read_delim("C:/Users/Ahmed/Desktop/hedo_biscuit.csv",
";", escape_double = FALSE, trim_ws = TRUE)
x=hedo$X1
row.names(hedo)=x
hedo=hedo[,-1]
hedo=t(hedo)
colnames(hedo)=x
install.packages("kohonen")
library(kohonen)
carte=som(hedo,grid=somgrid(5,5,"hexagonal"))
carte
plot(carte)
print(carte$grid)
hedo=as.matrix(hedo)
carte=som(hedo,grid=somgrid(5,5,"hexagonal"))
plot(carte)
carte=som(hedo,grid=somgrid(5,5,"hexagonal"))
plot(carte)
carte=som(hedo,grid=somgrid(5,5,"hexagonal"))
plot(carte)
carte=som(hedo,somgrid(5,5,"hexagonal"))
plot(carte)
carte=som(hedo,grid = somgrid(5,5,"hexagonal"))
plot(carte)
print(carte$grid)
degcoul=fonction(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))
}
degcoul=fonction(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))
}
degcoul=fonction(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))
}
degcoul=function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))
}
plot(carte,type = "count",palette.name = degrade)
plot(carte,type = "count",palette.name = "degrade")
hedo=as.matrix(hedo)
carte=som(hedo,grid = somgrid(5,5,"hexagonal"))
plot(carte)
degcoul=function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))
}
degrad=function(n){
return(rgb(0,0.4,1,alpha=seq(0,1,1/n)))
}
plot(carte,type = "count",palette.name = degrad )
plot(carte,type = "count",palette.name = degrad() )
plot(carte,type = "count",palette.name = degrad)
plot(carte,type = "count",palette= degrad)
plot(carte,type = "count",palette= degrad)
.name
plot(carte,type = "count",palette.name = degrad)
plot(carte,type = "count",palette = degrad)
plot(carte,type = "count",palette = degrad)
plot(carte,type = "dist.neighbours")
plot(carte,type = "codes",codeRendering = "segment")
plot(carte,type = "codes",codeRendering = "segments")
plot(carte)
carte=som(hedo,grid = somgrid(5,5,"hexagonal"))
plot(carte)
carte$codes
plot(carte,type = "property")
plot(carte,type = "proprety")
plot(carte$codes,type = "property")
plot(carte$codes,type = "property")
plot(carte,type = "property")
plot(carte,type = "property")
plot(carte,type = "proprety")
plot(carte,type = "properties")
plot(carte$codes,type = "property")
par(mfrow=c(2,4))
for(j in 1:ncol(hedo)){
plot(carte,type = "property",property = carte$codes[,j])
}
par(mfrow=c(2,4))
for(j in 1:ncol(hedo)){
plot(carte,type = "property",property = carte$codes[,j])
}
for(j in 1:ncol(hedo)){
plot(carte,type = "property",property = carte$codes[j,])
}
for(j in 1:nrow(hedo)){
plot(carte,type = "property",property = carte$codes[,j])
}
carte$codes=as.data.frame(carte$codes)
for(j in 1:ncol(hedo){
plot(carte,type = "property",property = carte$codes[,j])
}
for(j in 1:ncol(hedo){
plot(carte,type = "property",property = carte$codes[,j])
}
par(mfrow=c(2,4))
carte$codes=as.data.frame(carte$codes)
for(j in 1:ncol(hedo){
plot(carte,type = "property",property = carte$codes[,j])
}
for(j in 1:ncol(hedo)){
plot(carte,type = "property",property = carte$codes[,j])
}
par(mfrow=c(2,4))
carte$codes=as.data.frame(carte$codes)
for(j in 1:ncol(hedo)){
plot(carte,type = "property",property = carte$codes[,j])
}
rmarkdown::render_site()
rmarkdown::render_site()
getwd()
setwd("D:/ahmedsaad95.github.io/website/Projects")
getwd()
rmarkdown::render_site()
